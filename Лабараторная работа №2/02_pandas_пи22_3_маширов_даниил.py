# -*- coding: utf-8 -*-
"""02_pandas_ПИ22-3_Маширов_Даниил.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rB-s-vBDrA0GkBCnpxXWQDvCVeUm0e0Z

# Pandas

Материалы:
* Макрушин С.В. "Лекция 2: Библиотека Pandas"
* https://pandas.pydata.org/docs/user_guide/index.html#
* https://pandas.pydata.org/docs/reference/index.html
* Уэс Маккини. Python и анализ данных

## Задачи для совместного разбора
"""

import pandas as pd
import numpy as np

"""1. Загрузите данные из файла `sp500hst.txt` и обозначьте столбцы в соответствии с содержимым: `"date", "ticker", "open", "high", "low", "close", "volume"`."""

data = pd.read_csv('sp500hst.txt', header = None, names = ["date", "ticker", "open", "high", "low", "close", "volume"])
data

"""2. Рассчитайте среднее значение показателей для каждого из столбцов c номерами 3-6."""

mean = data.iloc[:, 2:6].mean()
mean

"""3. Добавьте столбец, содержащий только число месяца, к которому относится дата."""

data["month"] = (data["date"] % 1000) // 100
data

"""4. Рассчитайте суммарный объем торгов для для одинаковых значений тикеров."""

data['sum volume'] = data.groupby('ticker')['volume'].transform('sum')
data.drop_duplicates(subset=['ticker'])[['ticker', 'volume']]

"""5. Загрузите данные из файла sp500hst.txt и обозначьте столбцы в соответствии с содержимым: "date", "ticker", "open", "high", "low", "close", "volume". Добавьте столбец с расшифровкой названия тикера, используя данные из файла `sp_data2.csv` . В случае нехватки данных об именах тикеров корректно обработать их."""

data = pd.read_csv('sp500hst.txt', names = ["date", "ticker", "open", "high", "low", "close", "volume"])
data_2 = pd.read_csv('sp_data2.csv', sep = ';', names = ["ticker", "full name", "percent"])
data_3 = data.merge(data_2[['ticker', 'full name']], how = 'left')
data_3

"""## Лабораторная работа №2

### Базовые операции с `DataFrame`

1.1 В файлах `recipes_sample.csv` и `reviews_sample.csv` находится информация об рецептах блюд и отзывах на эти рецепты соответственно. Загрузите данные из файлов в виде `pd.DataFrame` с названиями `recipes` и `reviews`. Обратите внимание на корректное считывание столбца с индексами в таблице `reviews` (безымянный столбец).
"""

recipes = pd.read_csv('recipes_sample.csv', parse_dates=[4])
recipes

reviews = pd.read_csv('reviews_sample.csv', parse_dates=[3], index_col=0)
reviews

"""1.2 Для каждой из таблиц выведите основные параметры:
* количество точек данных (строк);
* количество столбцов;
* тип данных каждого столбца.
"""

recipes.shape # строчки и столбцы

recipes.dtypes # тип данных каждого столбца

reviews.shape # строчки и столбцы

reviews.dtypes # тип данных каждого столбца

"""1.3 Исследуйте, в каких столбцах таблиц содержатся пропуски. Посчитайте долю строк, содержащих пропуски, в отношении к общему количеству строк."""

recipes.isnull().sum()

proportion = recipes.isnull().sum(axis=1)
proportion [proportion != 0].shape[0] / recipes.shape[0]

"""1.4 Рассчитайте среднее значение для каждого из числовых столбцов (где это имеет смысл)."""

recipes[['minutes', 'n_steps', 'n_ingredients']].mean()

reviews['rating'].mean()

"""1.5 Создайте серию из 10 случайных названий рецептов."""

recipes['name'][np.random.randint(recipes['name'].shape[0], size=10)]

"""1.6 Измените индекс в таблице `reviews`, пронумеровав строки, начиная с нуля."""

reviews = reviews.reset_index(drop=True)

reviews

"""1.7 Выведите информацию о рецептах, время выполнения которых не больше 20 минут и кол-во ингредиентов в которых не больше 5."""

recipes[(recipes['minutes'] < 20) & (recipes['n_ingredients'] < 5)]

"""### Работа с датами в `pandas`

2.1 Преобразуйте столбец `submitted` из таблицы `recipes` в формат времени. Модифицируйте решение задачи 1.1 так, чтобы считать столбец сразу в нужном формате.
"""

recipes["submitted"] = pd.to_datetime(recipes["submitted"])
print(recipes.dtypes)

recipes

"""2.2 Выведите информацию о рецептах, добавленных в датасет не позже 2010 года."""

recipes[(recipes['submitted'].dt.to_period("Y") <= pd.PeriodIndex([2010], dtype='period[A-DEC]')[0])]

"""### Работа со строковыми данными в `pandas`

3.1  Добавьте в таблицу `recipes` столбец `description_length`, в котором хранится длина описания рецепта из столбца `description`.
"""

recipes['description_length'] = recipes['description'].str.len()
recipes

"""3.2 Измените название каждого рецепта в таблице `recipes` таким образом, чтобы каждое слово в названии начиналось с прописной буквы."""

recipes['name'] = recipes['name'].str.title()
recipes

"""3.3 Добавьте в таблицу `recipes` столбец `name_word_count`, в котором хранится количество слов из названии рецепта (считайте, что слова в названии разделяются только пробелами). Обратите внимание, что между словами может располагаться несколько пробелов подряд."""

recipes['name_word_count'] = recipes['name'].str.split().str.len()
recipes

"""### Группировки таблиц `pd.DataFrame`

4.1 Посчитайте количество рецептов, представленных каждым из участников (`contributor_id`). Какой участник добавил максимальное кол-во рецептов?
"""

recipes.groupby('contributor_id').count()['id']

recipes.groupby('contributor_id').count()['id'].idxmax()

"""4.2 Посчитайте средний рейтинг к каждому из рецептов. Для скольких рецептов отсутствуют отзывы? Обратите внимание, что отзыв с нулевым рейтингом или не заполненным текстовым описанием не считается отсутствующим."""

rate_mean = reviews.groupby('recipe_id').mean()['rating']
rate_mean

len(recipes['id']) - len(rate_mean)

"""4.3 Посчитайте количество рецептов с разбивкой по годам создания."""

recipes.groupby(recipes['submitted'].dt.to_period("Y")).count()

"""### Объединение таблиц `pd.DataFrame`

5.1 При помощи объединения таблиц, создайте `DataFrame`, состоящий из четырех столбцов: `id`, `name`, `user_id`, `rating`. Рецепты, на которые не оставлен ни один отзыв, должны отсутствовать в полученной таблице. Подтвердите правильность работы вашего кода, выбрав рецепт, не имеющий отзывов, и попытавшись найти строку, соответствующую этому рецепту, в полученном `DataFrame`.
"""

df = pd.merge(recipes[['id', 'name']], reviews[['user_id', 'rating', 'recipe_id']], left_on='id', right_on='recipe_id').drop('recipe_id', axis=1)
df

"""5.2 При помощи объединения таблиц и группировок, создайте `DataFrame`, состоящий из трех столбцов: `recipe_id`, `name`, `review_count`, где столбец `review_count` содержит кол-во отзывов, оставленных на рецепт `recipe_id`. У рецептов, на которые не оставлен ни один отзыв, в столбце `review_count` должен быть указан 0. Подтвердите правильность работы вашего кода, выбрав рецепт, не имеющий отзывов, и найдя строку, соответствующую этому рецепту, в полученном `DataFrame`."""

df1 = pd.merge(recipes[['name', 'id']], reviews['recipe_id'], left_on='id', right_on='recipe_id')
df1

df2 = pd.merge(reviews.groupby('recipe_id').count()['date'], df1, right_on='recipe_id', left_on='recipe_id').drop('id', axis=1)
df2.rename(columns={'date': 'review_count'})

"""5.3. Выясните, рецепты, добавленные в каком году, имеют наименьший средний рейтинг?

### Сохранение таблиц `pd.DataFrame`

6.1 Отсортируйте таблицу в порядке убывания величины столбца `name_word_count` и сохраните результаты выполнения заданий 3.1-3.3 в csv файл.

#### [версия 2]
* Уточнены формулировки задач 1.1, 3.3, 4.2, 5.1, 5.2, 5.3
"""